<?php

require 'vendor/autoload.php';

use S3\Lib\S3;

// Configura√ß√£o do bucket principal
s3_config('default', [
    'bucket' => 'meu-bucket-exemplo',
    'region' => 'sa-east-1',
    'access_key' => 'SUA_ACCESS_KEY',
    'secret_key' => 'SUA_SECRET_KEY',
    'url_cdn' => 'https://cdn.exemplo.com', // CDN opcional
    'use_accelerate' => false // S3 Transfer Acceleration
]);

// Configura√ß√£o para desenvolvimento local (LocalStack)
s3_config('local', [
    'bucket' => 'meu-bucket-local',
    'region' => 'us-east-1',
    'access_key' => 'test',
    'secret_key' => 'test',
    'endpoint' => 'http://localhost:4566',
    'use_path_style' => true
]);

// Configura√ß√£o com S3 Transfer Acceleration
s3_config('accelerated', [
    'bucket' => 'meu-bucket-acelerado',
    'region' => 'us-east-1',
    'access_key' => 'SUA_ACCESS_KEY',
    'secret_key' => 'SUA_SECRET_KEY',
    'use_accelerate' => true
]);

try {
    // Obter inst√¢ncia do bucket
    $bucket = s3('default');

    echo "=== Exemplo de Uso S3 PHP Library Melhorada ===\n\n";

    // 1. Verificar se bucket existe
    if ($bucket->isExistBucket()) {
        echo "‚úÖ Bucket existe\n";
    } else {
        echo "‚ùå Bucket n√£o existe\n";
        // Criar bucket se n√£o existir
        $bucket->createBucket(S3::ACL_PRIVATE);
        echo "‚úÖ Bucket criado\n";
    }

    // 2. Configurar CDN (se dispon√≠vel)
    if (!empty($bucket->getCdnUrl())) {
        echo "üåê CDN configurado: {$bucket->getCdnUrl()}\n";
    }

    // 3. Upload de arquivo
    $testContent = "Este √© um arquivo de teste criado em " . date('Y-m-d H:i:s');
    $result = $bucket->put('teste/arquivo.txt', $testContent, [
        'Content-Type' => 'text/plain',
        'Cache-Control' => 'max-age=3600'
    ]);
    echo "‚úÖ Arquivo enviado: {$result['Key']}\n";

    // 4. Verificar se arquivo existe
    if ($bucket->existObject('teste/arquivo.txt')) {
        echo "‚úÖ Arquivo existe no S3\n";
    }

    // 5. Download de arquivo
    $content = $bucket->get('teste/arquivo.txt');
    echo "üìÑ Conte√∫do do arquivo: {$content}\n";

    // 6. Obter URL do objeto (com CDN se configurado)
    $url = $bucket->getObjectUrl('teste/arquivo.txt');
    echo "üîó URL do objeto (com CDN): {$url}\n";

    // 7. Obter URL direta (sem CDN)
    $directUrl = $bucket->getObjectUrl('teste/arquivo.txt', true, false);
    echo "üîó URL direta (sem CDN): {$directUrl}\n";

    // 8. Gerar URL de download (com attachment disposition)
    $downloadUrl = $bucket->getDownloadUrl('teste/arquivo.txt', 3600, [
        'response_content_disposition' => 'attachment; filename="arquivo.txt"',
        'response_content_type' => 'text/plain'
    ]);
    echo "üì• URL de download: {$downloadUrl}\n";

    // 9. Gerar URL pr√©-assinada (expira em 1 hora)
    $presignedUrl = $bucket->presignedUrl('teste/arquivo.txt', 3600);
    echo "üîê URL pr√©-assinada: {$presignedUrl}\n";

    // 10. Gerar URL pr√©-assinada com op√ß√µes customizadas
    $presignedUrlWithOptions = $bucket->presignedUrl('teste/arquivo.txt', 3600, 'GET', [
        'ResponseContentType' => 'text/plain',
        'ResponseContentDisposition' => 'inline; filename="arquivo.txt"'
    ]);
    echo "üîê URL pr√©-assinada com op√ß√µes: {$presignedUrlWithOptions}\n";

    // 11. Gerar URL para upload direto (POST)
    $postData = $bucket->presignedPostUrl('uploads/arquivo.txt', 3600, [
        ['content-length-range', 1, 10485760], // 1 byte a 10MB
        ['starts-with', '$key', 'uploads/']
    ]);
    echo "üì§ URL para upload direto: {$postData['url']}\n";
    echo "üìã Campos do formul√°rio: " . json_encode($postData['fields']) . "\n";

    // 12. Copiar arquivo
    $bucket->copy('teste/arquivo.txt', 'teste/arquivo-copia.txt');
    echo "üìã Arquivo copiado\n";

    // 13. Listar arquivos
    $files = $bucket->getFiles('teste/');
    echo "üìÅ Arquivos na pasta teste/: " . implode(', ', $files) . "\n";

    // 14. Obter metadados do objeto
    $metadata = $bucket->getObjectMetadata('teste/arquivo.txt');
    echo "üìä Tamanho do arquivo: " . ($metadata['ContentLength'] ?? 'N/A') . " bytes\n";
    echo "üìÖ √öltima modifica√ß√£o: " . ($metadata['LastModified'] ?? 'N/A') . "\n";

    // 15. Configurar metadados padr√£o
    $bucket->setDefaultMetadata([
        'Content-Type' => 'application/octet-stream',
        'Cache-Control' => 'max-age=86400'
    ]);
    echo "‚öôÔ∏è Metadados padr√£o configurados\n";

    // 16. Upload de arquivo com metadados padr√£o
    $bucket->put('teste/arquivo-com-metadados.txt', 'Conte√∫do com metadados padr√£o');
    echo "üì§ Arquivo com metadados padr√£o enviado\n";

    // 17. Obter estat√≠sticas do bucket
    $size = $bucket->getBucketSize();
    $count = $bucket->getBucketObjectCount();
    echo "üìà Estat√≠sticas do bucket:\n";
    echo "   - Total de objetos: {$count}\n";
    echo "   - Tamanho total: " . number_format($size) . " bytes\n";

    // 18. Informa√ß√µes de configura√ß√£o do endpoint
    $endpointConfig = $bucket->getEndpointConfig();
    echo "üîß Configura√ß√£o do endpoint:\n";
    echo "   - Tipo: {$endpointConfig['type']}\n";
    echo "   - URL: {$endpointConfig['url']}\n";
    echo "   - Usando CDN: " . ($bucket->isUsingCdn() ? 'Sim' : 'N√£o') . "\n";
    echo "   - Usando Acceleration: " . ($bucket->isUsingAccelerate() ? 'Sim' : 'N√£o') . "\n";
    echo "   - Usando Path Style: " . ($bucket->isUsingPathStyle() ? 'Sim' : 'N√£o') . "\n";

    // 19. Limpar cache de URLs
    $bucket->clearUrlCache();
    echo "üßπ Cache de URLs limpo\n";

    // 20. Deletar arquivos de teste
    $bucket->deleteMultiple([
        'teste/arquivo.txt',
        'teste/arquivo-copia.txt',
        'teste/arquivo-com-metadados.txt'
    ]);
    echo "üóëÔ∏è Arquivos de teste deletados\n";

    echo "\n=== Exemplo conclu√≠do com sucesso! ===\n";
} catch (Exception $e) {
    echo "‚ùå Erro: " . $e->getMessage() . "\n";
    echo "üìã Stack trace: " . $e->getTraceAsString() . "\n";
}

// Exemplo de uso com helper functions melhoradas
echo "\n=== Usando Helper Functions Melhoradas ===\n";

// Verificar se arquivo existe usando helper
if (s3_exists('teste/arquivo.txt')) {
    echo "‚úÖ Arquivo existe (helper function)\n";
} else {
    echo "‚ùå Arquivo n√£o existe (helper function)\n";
}

// Obter URL usando helper (com CDN)
$url = s3_url('teste/arquivo.txt');
echo "üîó URL via helper (com CDN): {$url}\n";

// Obter URL direta (sem CDN)
$directUrl = s3_direct_url('teste/arquivo.txt');
echo "üîó URL direta via helper: {$directUrl}\n";

// Obter URL de CDN espec√≠fica
$cdnUrl = s3_cdn_url('teste/arquivo.txt');
echo "üåê URL CDN via helper: {$cdnUrl}\n";

// Gerar URL de download
$downloadUrl = s3_download_url('teste/arquivo.txt', 1800, [
    'response_content_disposition' => 'attachment; filename="download.txt"'
]);
echo "üì• URL de download via helper: {$downloadUrl}\n";

// Gerar URL pr√©-assinada usando helper
$presignedUrl = s3_presigned_url('teste/arquivo.txt', 1800, 'GET', [
    'ResponseContentType' => 'text/plain'
]);
echo "üîê URL pr√©-assinada via helper: {$presignedUrl}\n";

// Gerar URL para upload direto
$postData = s3_presigned_post('uploads/novo-arquivo.txt', 1800);
echo "üì§ URL para upload direto via helper: {$postData['url']}\n";

// Configurar CDN via helper
s3_set_cdn('https://novo-cdn.exemplo.com');
echo "üåê Novo CDN configurado via helper\n";

// Limpar cache via helper
s3_clear_cache();
echo "üßπ Cache limpo via helper\n";

// Upload via helper
s3_upload('teste/helper-upload.txt', 'Conte√∫do via helper function');
echo "üì§ Upload via helper function\n";

// Obter conte√∫do via helper
$content = s3_get('teste/helper-upload.txt');
echo "üìÑ Conte√∫do via helper: {$content}\n";

// Obter metadados via helper
$metadata = s3_metadata('teste/helper-upload.txt');
echo "üìä Metadados via helper: " . json_encode($metadata) . "\n";

// Deletar via helper
s3_delete('teste/helper-upload.txt');
echo "üóëÔ∏è Arquivo deletado via helper\n";

echo "\n=== Helper Functions testadas! ===\n";

// Exemplo de uso com diferentes configura√ß√µes
echo "\n=== Testando Diferentes Configura√ß√µes ===\n";

// Testar bucket local
try {
    $localBucket = s3('local');
    echo "üè† Bucket local configurado: " . $localBucket->getBucket() . "\n";
    echo "üîß Endpoint local: " . $localBucket->endpoint() . "\n";
} catch (Exception $e) {
    echo "‚ùå Erro no bucket local: " . $e->getMessage() . "\n";
}

// Testar bucket acelerado
try {
    $acceleratedBucket = s3('accelerated');
    echo "‚ö° Bucket acelerado configurado: " . $acceleratedBucket->getBucket() . "\n";
    echo "üîß Endpoint acelerado: " . $acceleratedBucket->endpoint() . "\n";
} catch (Exception $e) {
    echo "‚ùå Erro no bucket acelerado: " . $e->getMessage() . "\n";
}

echo "\n=== Todos os testes conclu√≠dos! ===\n";
